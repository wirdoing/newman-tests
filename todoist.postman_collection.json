{
	"info": {
		"_postman_id": "32bdc175-72b6-4dc3-a727-e7dbad0a3be4",
		"name": "todoist",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "project",
			"item": [
				{
					"name": "create project",
					"item": [
						{
							"name": "Create project",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"ID_Project\",jsonData.id);\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"pm.test(\"Set correct name\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.name).to.eql(\"wizeline project\");\r",
											"});\r",
											"\r",
											"var schema = {\r",
											"    \"items\": {\r",
											"    \"id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"order\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"color\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"name\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"comment_count\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"shared\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"favorite\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"sync_id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"url\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"id\",\r",
											"    \"order\",\r",
											"    \"color\",\r",
											"    \"name\",\r",
											"    \"comment_count\",\r",
											"    \"shared\",\r",
											"    \"favorite\",\r",
											"    \"sync_id\",\r",
											"    \"url\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"var data1 = pm.response.json();\r",
											"\r",
											"pm.test('Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"wizeline project\"\r\n}"
								},
								"url": {
									"raw": "{{URL}}/projects",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "task",
			"item": [
				{
					"name": "Create a new task",
					"item": [
						{
							"name": "Create a new task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Set correct name\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.content).to.eql(\"Start working\");\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"    pm.environment.set(\"ID_Task\",jsonData.id);\r",
											"\r",
											"\r",
											"var schema = {\r",
											"    \"items\": {\r",
											"        \"id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"assigner\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"project_id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"section_id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"order\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"content\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"completed\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"label_ids\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    },\r",
											"    \"priority\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"comment_count\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"creator\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"created\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"due\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"recurring\": {\r",
											"          \"type\": \"boolean\"\r",
											"        },\r",
											"        \"string\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"date\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"datetime\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"timezone\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"recurring\",\r",
											"        \"string\",\r",
											"        \"date\",\r",
											"        \"datetime\",\r",
											"        \"timezone\"\r",
											"      ]\r",
											"    },\r",
											"    \"url\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"id\",\r",
											"    \"assigner\",\r",
											"    \"project_id\",\r",
											"    \"section_id\",\r",
											"    \"order\",\r",
											"    \"content\",\r",
											"    \"completed\",\r",
											"    \"label_ids\",\r",
											"    \"priority\",\r",
											"    \"comment_count\",\r",
											"    \"creator\",\r",
											"    \"created\",\r",
											"    \"due\",\r",
											"    \"url\"\r",
											"  ]\r",
											"    }\r",
											"\r",
											"var data1 = pm.response.json();\r",
											"\r",
											"pm.test('Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"content\": \"Start working\", \"due_string\": \"tomorrow at 1:00\", \r\n\"due_lang\": \"en\", \"priority\": 4,\"project_id\":{{ID_Project}}}"
								},
								"url": {
									"raw": "{{URL}}/tasks",
									"host": [
										"{{URL}}"
									],
									"path": [
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a new task Invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"content\": \"Start working\", \"due_string\": \"tomorrow at 1:00\", \r\n\"due_lang\": \"en\", \"priority\": 4,\"project_id\":\"dilsjfos\"}"
								},
								"url": {
									"raw": "{{URL}}/tasks",
									"host": [
										"{{URL}}"
									],
									"path": [
										"tasks"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get tasks",
					"item": [
						{
							"name": "Get Active Tasks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"})\r",
											"\r",
											"var schema = {\r",
											"    \"items\": {\r",
											"        \"id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"assigner\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"project_id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"section_id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"order\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"content\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"completed\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"label_ids\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    },\r",
											"    \"priority\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"comment_count\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"creator\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"created\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"due\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"recurring\": {\r",
											"          \"type\": \"boolean\"\r",
											"        },\r",
											"        \"string\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"date\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"datetime\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"timezone\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"recurring\",\r",
											"        \"string\",\r",
											"        \"date\",\r",
											"        \"datetime\",\r",
											"        \"timezone\"\r",
											"      ]\r",
											"    },\r",
											"    \"url\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"id\",\r",
											"    \"assigner\",\r",
											"    \"project_id\",\r",
											"    \"section_id\",\r",
											"    \"order\",\r",
											"    \"content\",\r",
											"    \"completed\",\r",
											"    \"label_ids\",\r",
											"    \"priority\",\r",
											"    \"comment_count\",\r",
											"    \"creator\",\r",
											"    \"created\",\r",
											"    \"due\",\r",
											"    \"url\"\r",
											"  ]\r",
											"    }\r",
											"\r",
											"var data1 = pm.response.json();\r",
											"\r",
											"pm.test('Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
											"}\r",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/tasks",
									"host": [
										"{{URL}}"
									],
									"path": [
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Active Tasks Invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/tasks/kvfkdv,lf",
									"host": [
										"{{URL}}"
									],
									"path": [
										"tasks",
										"kvfkdv,lf"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get an active task",
					"item": [
						{
							"name": "Get an active task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Task is not completed\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.completed).to.eql(false);\r",
											"});\r",
											" \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"var schema = {\r",
											"    \"items\": {\r",
											"         \"id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"assigner\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"project_id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"section_id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"order\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"content\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"completed\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"label_ids\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    },\r",
											"    \"priority\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"comment_count\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"creator\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"created\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"due\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"recurring\": {\r",
											"          \"type\": \"boolean\"\r",
											"        },\r",
											"        \"string\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"date\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"datetime\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"timezone\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"recurring\",\r",
											"        \"string\",\r",
											"        \"date\",\r",
											"        \"datetime\",\r",
											"        \"timezone\"\r",
											"      ]\r",
											"    },\r",
											"    \"url\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"id\",\r",
											"    \"assigner\",\r",
											"    \"project_id\",\r",
											"    \"section_id\",\r",
											"    \"order\",\r",
											"    \"content\",\r",
											"    \"completed\",\r",
											"    \"label_ids\",\r",
											"    \"priority\",\r",
											"    \"comment_count\",\r",
											"    \"creator\",\r",
											"    \"created\",\r",
											"    \"due\",\r",
											"    \"url\"\r",
											"  ]\r",
											"    }\r",
											"\r",
											"\r",
											"var data1 = pm.response.json();\r",
											"\r",
											"pm.test('Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
											"});\r",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/tasks/{{ID_Task}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"tasks",
										"{{ID_Task}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update a task",
					"item": [
						{
							"name": "update a task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"content\": \"Eat something\"\r\n}"
								},
								"url": {
									"raw": "{{URL}}/tasks/{{ID_Task}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"tasks",
										"{{ID_Task}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update a task Invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"content\": \"Eat something\"\r\n}"
								},
								"url": {
									"raw": "{{URL}}/tasks/@@@",
									"host": [
										"{{URL}}"
									],
									"path": [
										"tasks",
										"@@@"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Change a task to status complete",
					"item": [
						{
							"name": "change a task to status complete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{URL}}/tasks/{{ID_Task}}/close",
									"host": [
										"{{URL}}"
									],
									"path": [
										"tasks",
										"{{ID_Task}}",
										"close"
									]
								}
							},
							"response": []
						},
						{
							"name": "change a task to status complete Invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{URL}}/tasks/@@@/close",
									"host": [
										"{{URL}}"
									],
									"path": [
										"tasks",
										"@@@",
										"close"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Reopen a task",
					"item": [
						{
							"name": "reopen a task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{URL}}/tasks/{{ID_Task}}/reopen",
									"host": [
										"{{URL}}"
									],
									"path": [
										"tasks",
										"{{ID_Task}}",
										"reopen"
									]
								}
							},
							"response": []
						},
						{
							"name": "reopen a task Invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{URL}}/tasks/@@@/reopen",
									"host": [
										"{{URL}}"
									],
									"path": [
										"tasks",
										"@@@",
										"reopen"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "delete a task",
					"item": [
						{
							"name": "delete a task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{URL}}/tasks/{{ID_Task}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"tasks",
										"{{ID_Task}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete a task Invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{URL}}/tasks/@@@",
									"host": [
										"{{URL}}"
									],
									"path": [
										"tasks",
										"@@@"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{Token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}